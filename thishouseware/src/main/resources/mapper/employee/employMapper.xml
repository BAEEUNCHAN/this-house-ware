<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.contractor.app.employee.mapper.EmployeeMapper">
	<select id="selectEmployees" resultType="EmployeeVO">
		select 
		    id,
		    name,
		    email,
		    password,
		    hire_dt,
		    phone,
		    image_link,
		    e.department_no,
		    position_code,
		    RESIGN_DT,
    		D_SIGNATURE,
            d.department_name
		FROM
		    employees e
        JOIN 
            department d
        on (e.department_no = d.department_no)
		order by id
	</select>
	<select id="selectEmployeesWhereDept" resultType="EmployeeVO" parameterType="EmployeeVO">
		select 
		    id,
		    name,
		    email,
		    password,
		    hire_dt,
		    phone,
		    image_link,
		    e.department_no,
		    position_code,
		    RESIGN_DT,
    		D_SIGNATURE,
            d.department_name
		FROM
		    employees e
        JOIN 
            department d
        on (e.department_no = d.department_no)
		where department_name = #{departmentName}
	</select>
	<select id="insertEmployee" statementType="CALLABLE" parameterType="EmployeeVO">
		{
			call ADD_NEW_EMP(
				#{password}, 
				#{phone}, 
				#{email}, 
				#{imageLink}, 
				#{departmentNo},
				#{hireDt},
				#{positionCode},
				#{name},
				#{id, mode=OUT, jdbcType=VARCHAR}
			)
		}
	</select>
	<!-- 사용된 프로시져 코드 
		create or replace PROCEDURE ADD_NEW_EMP
			(
			  p_password IN VARCHAR2 
			, p_phone IN VARCHAR2 
			, p_email IN VARCHAR2 
			, p_image_link IN VARCHAR2 
			, p_department_no IN NUMBER 
			, p_hire_dt IN DATE 
			, p_position_code IN VARCHAR2 
			, p_name IN VARCHAR2 
			, p_id OUT VARCHAR2
			) AS 
			    v_id employees.id%TYPE;
			BEGIN
			    SELECT  'emp'
			        ||TO_CHAR(SUBSTR(NVL( MAX(id),'emp99'),4)+1) 
			    into v_id
			    FROM employees;
			    
			    INSERT INTO EMPLOYEES 
					(id, 
					PASSWORD, 
					PHONE, 
					EMAIL, 
					IMAGE_LINK, 
					DEPARTMENT_NO,
					hire_dt,
					position_code,
					name
					) 
					VALUES 
					(
					v_id,
					p_password, 
					p_phone, 
					p_email, 
					p_image_link, 
					p_department_no,
					p_hire_dt,
					p_position_code,
					p_name
					);
			    INSERT INTO AUTHENTICATIONS
			    ( id)
			    VALUES
			    ( v_id);
			    
			    INSERT INTO LEAVE_DETAIL (ID) VALUES (v_id);
			    
			    p_id := v_id;
			END ADD_NEW_EMP;
	-->	
	<select id="selectEmployee" parameterType="EmployeeVO" resultType="EmployeeVO">
		SELECT
		    id,
		    name,
		    email,
		    password,
		    hire_dt,
		    phone,
		    image_link,
		    e.department_no,
		    position_code,
		    RESIGN_DT,
    		D_SIGNATURE,
            d.department_name
		FROM
		    employees e
        JOIN 
            department d
        on (e.department_no = d.department_no)
		WHERE id = #{id}
	</select>
	<select id="selectEmployeeByEmail" parameterType="EmployeeVO" resultType="EmployeeVO">
		SELECT
		    id,
		    name,
		    email,
		    password,
		    hire_dt,
		    phone,
		    image_link,
		    e.department_no,
		    position_code,
		    RESIGN_DT,
    		D_SIGNATURE,
            d.department_name
		FROM
		    employees e
        JOIN 
            department d
        on (e.department_no = d.department_no)
		WHERE email = #{email}
	</select>
	<update id="updateEmployee" parameterType="EmployeeVO">
		UPDATE employees 
		SET HIRE_DT = #{hireDt}
		    ,PHONE = #{phone}
		    ,EMAIL = #{email}
		    ,IMAGE_LINK = #{imageLink}
		    ,DEPARTMENT_NO = #{departmentNo}
		    ,POSITION_CODE = #{positionCode}
		    ,NAME = #{name}
		    <if test = "password != null">
		    	,PASSWORD = #{password} 
		    </if>
		WHERE id = #{id}
	</update>
	<update id="updateEmployeeByEmp" parameterType="EmployeeVO">
		UPDATE employees 
		SET PASSWORD = #{password} 
		WHERE id = #{id}
	</update>
	<select id="canChangePwFunc" resultType="String">
		SELECT 
	        CAN_CHANGE_PW(
	             #{id}
	            ,#{authenticationsValue}
	        ) AS result
        FROM DUAL
	</select>
	<!-- 사용된 pl/sql 함수 코드
		create or replace FUNCTION CAN_CHANGE_PW 
		(
		  ID IN VARCHAR2 
		, AUTHENTICATIONSVALUE IN VARCHAR2 
		) RETURN VARCHAR2 AS 
		    v_time NUMBER(8,2);
		BEGIN
		    
		    SELECT  ROUND((sysdate - Authentications_time) * 24 * 60)
		    INTO v_time
		    FROM  Authentications
		    WHERE id = id
		    AND authentications_value = AUTHENTICATIONSVALUE;
		
		    IF v_time > 5 THEN
		        return 2;
		    END IF;
		    
		    RETURN 0;
		    EXCEPTION 
		        WHEN NO_DATA_FOUND THEN
		            RETURN 1;
		        WHEN OTHERS THEN 
		            RETURN -1;
		END CAN_CHANGE_PW;
	 -->
	 <update id="updateEmployeeForResign" parameterType="String">
	 	UPDATE EMPLOYEES 
	 	SET RESIGN_DT = SYSDATE 
	 	WHERE id = #{id}
	 </update>
	 
	 <!-- 은찬추가 -->
	 <select id="selectEmpByDept" parameterType="Integer" resultType="EmployeeVO">
	    SELECT e.id
	    	  , e.name
	    	  , e.position_code
	    FROM employees e
	    WHERE e.department_no = #{departmentNo}
	</select>
</mapper>